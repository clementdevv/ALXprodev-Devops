#!/usr/bin/env bash
#kill, jobs
# This script fetches data for multiple Pokémon in parallel.

# Define the list of Pokémon
POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Define the API endpoint
API_URL="https://pokeapi.co/api/v2/pokemon/"

# Create a directory to store the JSON files if it doesn't exist
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

echo "Starting parallel data fetching..."

# Loop through the list of Pokémon and start a background process for each
for pokemon in "${POKEMON_LIST[@]}"
do
    # Convert the name to lowercase for the URL and filename
    lowercase_pokemon=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')

    # Fetch data for each Pokémon and save it to a file
    # The `&` at the end of the line runs the command in the background
    echo "Fetching data for ${pokemon} in the background..."
    curl -s "${API_URL}${lowercase_pokemon}" -o "${OUTPUT_DIR}/${lowercase_pokemon}.json" &
done

# The `wait` command is crucial here. It pauses the script until all
# background processes (the ones we started with `&`) are complete.
echo "All background processes started. Waiting for them to finish..."
wait

echo "All Pokémon data fetched successfully."
echo "Batch processing complete."
