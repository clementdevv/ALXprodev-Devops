#!/usr/bin/env bash
# Script to fetch Pokémon data with error handling and retry logic.

# Define the list of Pokémon
POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon" "Mewtwo")

# Define the API endpoint
API_URL="https://pokeapi.co/api/v2/pokemon/"

# Create a directory to store the JSON files if it doesn't exist
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

# Loop through the list of Pokémon
for pokemon in "${POKEMON_LIST[@]}"
do
    echo "Fetching data for ${pokemon}..."
    filename="${OUTPUT_DIR}/${pokemon,,}.json"
    
    # Initialize variables for retry logic
    retries=0
    max_retries=3
    success=false
    
    # Retry loop
    while [ "$retries" -lt "$max_retries" ] && [ "$success" == false ]
    do
        # Make the API request and check the HTTP status code
        response=$(curl -s -o "$filename" -w "%{http_code}" "${API_URL}${pokemon,,}")
        http_status=${response: -3}
        
        # Check if the request was successful (HTTP status 200)
        if [ "$http_status" -eq 200 ]; then
            echo "Saved data to $filename ✅"
            success=true
            
        elif [ "$http_status" -eq 404 ]; then
            echo "Error: Pokémon '${pokemon}' not found (HTTP 404). Skipping..."
            # Clean up the empty file created by curl
            rm -f "$filename"
            break  # Exit the retry loop for 404 errors
            
        else
            retries=$((retries + 1))
            echo "Failed to fetch data for '${pokemon}' (HTTP ${http_status}). Retrying... ($retries/$max_retries)"
            sleep 2  # Wait for 2 seconds before retrying
        fi
    done
    
    # If all retries failed, log the error
    if [ "$success" == false ]; then
        echo "Failed to fetch data for '${pokemon}' after $max_retries attempts. Skipping to the next Pokémon."
    fi
    
    # Add a delay between requests to avoid rate-limiting
    sleep 1
done

echo "Batch processing complete."
